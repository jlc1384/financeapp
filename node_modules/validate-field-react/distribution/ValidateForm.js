'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _ValidateField = require('./ValidateField');

var _ValidateField2 = _interopRequireDefault(_ValidateField);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Prop Types Validation
 *
 * @type object
 */
var propTypes = {
  isValid: _react.PropTypes.func
};

/**
 * Default Props
 *
 * @type  object
 */
var defaultProps = {
  formData: {}
};

var ValidateForm = function (_Component) {
  _inherits(ValidateForm, _Component);

  function ValidateForm(props) {
    _classCallCheck(this, ValidateForm);

    var _this = _possibleConstructorReturn(this, (ValidateForm.__proto__ || Object.getPrototypeOf(ValidateForm)).call(this, props));

    _this.state = {
      formData: props.data,
      isValid: false
    };
    _this.handleFieldChange = _this.handleFieldChange.bind(_this);
    _this.validateFields = _this.recursiveValidateChildren(_this.props.children);
    return _this;
  }

  /**
   * Handle a simple field change in any field in the form
   *
   * @param   {mixed}   value  The value entered or selected in a form field
   * @param   {string}  name   Key in the form data state object to change
   *
   * @return  {void}
   */


  _createClass(ValidateForm, [{
    key: 'handleFieldChange',
    value: function handleFieldChange(value, name) {
      var _this2 = this;

      var formData = Object.assign(this.state.formData, _defineProperty({}, name, value));
      var errors = this.validateFields.filter(function (field) {
        var result = field.type.hasError(field.type.getValidationErrors(field.props, _this2.state.formData[field.props.name]));

        return result;
      });

      var isValid = errors.length === 0;
      if (this.props.isValid) {
        this.props.isValid(isValid, formData);
      }

      return this.setState({
        formData: formData,
        isValid: isValid
      });
    }

    /**
     * Get ValidateFields from children
     *
     * @param   {array|node}  children  Nested elements
     *
     * @return  {array}
     */

  }, {
    key: 'recursiveValidateChildren',
    value: function recursiveValidateChildren(children) {
      var _this3 = this;

      return _react2.default.Children.map(children, function (child) {
        if (_react2.default.isValidElement(child) && child.type === _ValidateField2.default) {
          return child;
        } else if (_react2.default.isValidElement(child)) {
          return _this3.recursiveValidateChildren(child.props.children);
        }
      });
    }

    /**
     * Clone all ValidateField components with extra props
     *
     * @param   {array|node}  children  Nested elements
     *
     * @return  {array}
     */

  }, {
    key: 'recursiveCloneChildren',
    value: function recursiveCloneChildren(children) {
      var _this4 = this;

      return _react2.default.Children.map(children, function (child) {
        var childProps = {};
        if (!_react2.default.isValidElement(child)) {
          return child;
        }
        if (child.type === _ValidateField2.default) {
          childProps = {
            onChange: _this4.handleFieldChange
          };
        }
        childProps.children = _this4.recursiveCloneChildren(child.props.children);
        return _react2.default.cloneElement(child, childProps);
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var children = this.recursiveCloneChildren(this.props.children);

      return _react2.default.createElement(
        'span',
        null,
        children
      );
    }
  }]);

  return ValidateForm;
}(_react.Component);

exports.default = ValidateForm;


ValidateForm.propTypes = propTypes;

ValidateForm.defaultProps = defaultProps;