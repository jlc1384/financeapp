'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _validation = require('../validation/validation');

var _validation2 = _interopRequireDefault(_validation);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var Form = _react2.default.createClass({
	displayName: 'Form',
	getChildContext: function getChildContext() {
		return { form: this };
	},
	resetFields: function resetFields() {
		this.fields = [];
	},
	registerField: function registerField(field) {
		if (!this.fields) {
			this.resetFields();
		}
		this.fields.push(field);
	},
	render: function render() {
		var _props = this.props,
		    className = _props.className,
		    otherProps = _objectWithoutProperties(_props, ['className']);

		className = className || 'form-horizontal';
		delete otherProps.state;
		delete otherProps.setState;
		delete otherProps.validations;
		delete otherProps.tableForm;
		delete otherProps.onSubmit;
		delete otherProps.onChange;
		return _react2.default.createElement('form', _extends({ className: className, action: '#', role: 'form' }, otherProps, { onSubmit: this._onSubmit }));
	},
	componentDidMount: function componentDidMount() {
		this.focus();
	},
	componentDidUpdate: function componentDidUpdate(prevProps) {
		var values = this.props.state.values;

		var prevState = prevProps.state;
		if (this.fields) {
			this.fields.forEach(function (field) {
				if (field.initWidgetValue && field._getValueKeys) {
					field._getValueKeys().forEach(function (valueKey) {
						var prevValue = prevState.values && prevState.values[valueKey];
						var nextValue = values && values[valueKey];
						if (nextValue !== prevValue) {
							field.initWidgetValue(nextValue, prevValue, valueKey);
						}
					});
				}
			}, this);
		}
	},
	_onChange: function _onChange(id, value, row) {
		var values = this.props.state.values;

		if (this.props.tableForm) {
			values = [].concat(_toConsumableArray(values));
			values[row] = Object.assign({}, values[row]);
			values[row][id] = value;
		} else {
			values = Object.assign({}, values);
			values[id] = value;
		}
		this.props.setState({ values: values }, this.changed);
	},
	changed: function changed() {
		this.validate();
		if (this.props.onChange) {
			this.props.onChange();
		}
	},
	validate: function validate(values, afterMessagesSet) {
		values = values || this.props.state.values;
		var validation = new _validation2.default(values, this.props.tableForm);
		validation.autoValidate(this.props.validations);
		this.props.setState({
			messages: validation.messages
		}, afterMessagesSet);
		return validation;
	},
	focus: function focus() {
		if (this.fields) {
			this.fields.find(function (field) {
				if (field.focus && !field.props.readonly) {
					field.focus();
					return true;
				}
			}, this);
		}
	},
	focusError: function focusError() {
		if (this.fields) {
			this.fields.find(function (field) {
				if (field._focusError && field._hasError && field._hasError() && !field.props.readonly) {
					field._focusError();
					return true;
				}
			}, this);
		}
	},
	showErrorOnAllFields: function showErrorOnAllFields() {
		if (this.fields) {
			this.fields.forEach(function (field) {
				if (field.state && typeof field.state.showFeedback !== 'undefined') {
					field.setState({ showFeedback: 'all' });
				}
			});
		}
	},
	setAllFieldValues: function setAllFieldValues() {
		var _props2 = this.props,
		    tableForm = _props2.tableForm,
		    state = _props2.state;

		var values = {};
		if (tableForm) {
			values = [];
			if (state.values) {
				state.values.forEach(function () {
					values.push({});
				});
			}
		}
		if (this.fields) {
			this.fields.forEach(function (field) {
				if (field._formField) {
					field._getValueKeys().forEach(function (valueKey) {
						if (tableForm) {
							values[field.props.row][valueKey] = null;
						} else {
							values[valueKey] = null;
						}
					}.bind(this));
				}
			}, this);
		}
		if (tableForm) {
			if (state.values) {
				state.values.forEach(function (valuesRow, row) {
					values[row] = Object.assign(values[row], state.values[row]);
				}.bind(this));
			}
		} else {
			values = Object.assign(values, state.values);
		}
		this.props.setState({ values: values });
		return values;
	},
	_onSubmit: function _onSubmit(event) {
		if (event) {
			event.preventDefault();
		}
		this.showErrorOnAllFields();
		var values = this.setAllFieldValues();
		var validation = this.validate(values, this.focusError);
		if (!validation.hasError() && this.props.onSubmit) {
			this.props.onSubmit();
		}
	}
});

Form.propTypes = {
	state: _react2.default.PropTypes.any.isRequired,
	setState: _react2.default.PropTypes.func.isRequired,
	validations: _react2.default.PropTypes.object,
	tableForm: _react2.default.PropTypes.bool,
	onSubmit: _react2.default.PropTypes.func,
	onChange: _react2.default.PropTypes.func
};

Form.childContextTypes = {
	form: _react2.default.PropTypes.object
};

exports.default = Form;