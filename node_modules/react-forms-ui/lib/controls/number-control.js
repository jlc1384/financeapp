'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _controlMixin = require('./control-mixin');

var _controlMixin2 = _interopRequireDefault(_controlMixin);

var _numeral = require('numeral');

var _numeral2 = _interopRequireDefault(_numeral);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

exports.default = _react2.default.createClass({
	displayName: 'number-control',


	mixins: [_controlMixin2.default],

	defaultFormat: '0,0.[00]',

	getInitialState: function getInitialState() {
		return { localValue: null };
	},
	render: function render() {
		var _props = this.props,
		    id = _props.id,
		    readonly = _props.readonly,
		    placeholder = _props.placeholder,
		    label = _props.label,
		    value = _props.value,
		    _props$className = _props.className,
		    className = _props$className === undefined ? '' : _props$className,
		    formControl = _props.formControl,
		    onChange = _props.onChange,
		    onBlur = _props.onBlur,
		    _props$format = _props.format,
		    format = _props$format === undefined ? this.defaultFormat : _props$format,
		    children = _props.children,
		    otherProps = _objectWithoutProperties(_props, ['id', 'readonly', 'placeholder', 'label', 'value', 'className', 'formControl', 'onChange', 'onBlur', 'format', 'children']);

		var localValue = this.state.localValue || (null != value ? (0, _numeral2.default)(value).format(format) : '');
		if (readonly) {
			if (formControl) {
				return _react2.default.createElement(
					'div',
					_extends({ className: className + ' form-control-static' }, otherProps),
					localValue
				);
			}
			return _react2.default.createElement(
				'span',
				_extends({ className: className }, otherProps),
				localValue
			);
		}
		return _react2.default.createElement(
			'span',
			null,
			_react2.default.createElement('input', _extends({ ref: 'input', id: id, name: id, type: 'text', className: className + ' form-control text-right',
				autoComplete: 'off', placeholder: placeholder || label, value: localValue }, otherProps, {
				onChange: this._onChange, onBlur: this._onBlur })),
			children
		);
	},
	focus: function focus() {
		var input = this.refs.input;

		if (input) {
			var el = _reactDom2.default.findDOMNode(input);
			el.focus();
			el.select();
		}
	},
	_onChange: function _onChange() {
		var onChange = this.props.onChange;

		if (onChange) {
			var value = this.refs.input.value;
			this.setState({ localValue: value });
			value = value ? this.parseValue(value) : null;
			onChange(value);
		}
	},
	parseValue: function parseValue(value) {
		var _props$format2 = this.props.format,
		    format = _props$format2 === undefined ? this.defaultFormat : _props$format2;

		var number = (0, _numeral2.default)().unformat(value);
		var reformatted = (0, _numeral2.default)(number).format(format);
		number = (0, _numeral2.default)().unformat(reformatted);
		return number;
	},
	_onBlur: function _onBlur(event) {
		var onBlur = this.props.onBlur;

		this.setState({ localValue: null });
		if (onBlur) {
			onBlur(event);
		}
	}
});