'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _controlMixin = require('./control-mixin');

var _controlMixin2 = _interopRequireDefault(_controlMixin);

var _options = require('../options/options');

var _options2 = _interopRequireDefault(_options);

var _jquery = require('jquery');

var _jquery2 = _interopRequireDefault(_jquery);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

exports.default = _react2.default.createClass({
	displayName: 'select-control',


	mixins: [_controlMixin2.default],

	render: function render() {
		var _props = this.props,
		    id = _props.id,
		    readonly = _props.readonly,
		    placeholder = _props.placeholder,
		    label = _props.label,
		    value = _props.value,
		    _props$className = _props.className,
		    className = _props$className === undefined ? '' : _props$className,
		    formControl = _props.formControl,
		    load = _props.load,
		    formatItem = _props.formatItem,
		    onChange = _props.onChange,
		    onBlur = _props.onBlur,
		    onSubmit = _props.onSubmit,
		    children = _props.children,
		    otherProps = _objectWithoutProperties(_props, ['id', 'readonly', 'placeholder', 'label', 'value', 'className', 'formControl', 'load', 'formatItem', 'onChange', 'onBlur', 'onSubmit', 'children']);

		if (readonly) {
			value = value && formatItem ? formatItem(value) : '';
			if (formControl) {
				return _react2.default.createElement(
					'div',
					_extends({ className: className + ' form-control-static' }, otherProps),
					value
				);
			}
			return _react2.default.createElement(
				'span',
				_extends({ className: className }, otherProps),
				value
			);
		}
		return _react2.default.createElement(
			'span',
			null,
			_react2.default.createElement('input', _extends({ ref: 'input', id: id, name: id, type: 'hidden', className: className + ' form-control',
				autoComplete: 'off', placeholder: placeholder || label, value: value ? value.id : '',
				onChange: this._onChange, onBlur: this._onBlur }, otherProps)),
			children
		);
	},
	componentDidMount: function componentDidMount() {
		var onSubmit = this.props.onSubmit;

		var $element = (0, _jquery2.default)(_reactDom2.default.findDOMNode(this.refs.input));
		$element.select2({
			allowClear: true,
			minimumInputLength: 0,
			query: this.query,
			initSelection: this.initSelection,
			formatSearching: function formatSearching() {
				return _options2.default.translate ? _options2.default.translate('select2:searching') : 'Searching...';
			},
			formatNoMatches: function formatNoMatches() {
				return _options2.default.translate ? _options2.default.translate('select2:noMatches') : 'No matches found.';
			}
		}).on('change', this._onChange).on('select2-blur', this._onBlur);
		// when select is first field on form, opening form by select immediately submits it
		//if (onSubmit) {
		//	const $container = $element.prev('.select2-container')
		//	$container.on('keyup', function (event) {
		//		if (13 === event.keyCode) {
		//			onSubmit()
		//		}
		//	})
		//}
	},
	query: function query(_query) {
		var _props2 = this.props,
		    load = _props2.load,
		    formatItem = _props2.formatItem;

		if (load && formatItem) {
			load(_query.term).then(function (list) {
				this._list = list;
				var results = list.map(function (item) {
					return { id: item.id, text: formatItem(item) };
				});
				_query.callback({ results: results });
			}.bind(this));
		}
	},
	initSelection: function initSelection($element, callback) {
		var _props3 = this.props,
		    value = _props3.value,
		    formatItem = _props3.formatItem;

		callback({ id: value.id, text: formatItem(value) });
	},
	initWidgetValue: function initWidgetValue(value, prevValue) {
		//if (undefined === prevValue && value) { // only initially
		var readonly = this.props.readonly;

		if (!readonly) {
			var $element = (0, _jquery2.default)(_reactDom2.default.findDOMNode(this.refs.input));
			$element.select2('val', value ? value.id : null);
		}
		//}
	},
	focus: function focus() {
		var input = this.refs.input;

		if (input) {
			var $element = (0, _jquery2.default)(_reactDom2.default.findDOMNode(this.refs.input));
			$element.select2('focus');
		}
	},
	_onChange: function _onChange(event) {
		var onChange = this.props.onChange;

		if (onChange) {
			var value = event.val;
			var item = null;
			if (value) {
				item = this._list.find(function (item) {
					return value === '' + item.id;
				});
			}
			onChange(item);
		}
	},
	_onBlur: function _onBlur(event) {
		var onBlur = this.props.onBlur;

		if (onBlur) {
			onBlur(event);
		}
	}
});