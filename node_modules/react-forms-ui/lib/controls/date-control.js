'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _controlMixin = require('./control-mixin');

var _controlMixin2 = _interopRequireDefault(_controlMixin);

var _moment = require('moment');

var _moment2 = _interopRequireDefault(_moment);

var _jquery = require('jquery');

var _jquery2 = _interopRequireDefault(_jquery);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

exports.default = _react2.default.createClass({
	displayName: 'date-control',


	mixins: [_controlMixin2.default],

	isoFormat: 'YYYY-MM-DD',
	localFormat: 'l',

	getInitialState: function getInitialState() {
		return { localValue: null };
	},
	getLocalValue: function getLocalValue(value) {
		return value ? (0, _moment2.default)(value).format(this.localFormat) : null;
	},
	getIsoValue: function getIsoValue(localValue) {
		var iso = (0, _moment2.default)(localValue, this.localFormat).format(this.isoFormat);
		if ('Invalid date' === iso) {
			return null;
		}
		return iso;
	},
	getPropDate: function getPropDate(date) {
		if (typeof date === 'function') {
			date = date();
		}
		if (typeof date === 'string') {
			date = (0, _moment2.default)(date);
		}
		return date || false;
	},
	getMinDate: function getMinDate() {
		var min = this.props.min;

		return this.getPropDate(min);
	},
	getMaxDate: function getMaxDate() {
		var max = this.props.max;

		return this.getPropDate(max);
	},
	getPickerMaxDate: function getPickerMaxDate() {
		var maxDate = this.getMaxDate();
		if (!maxDate) {
			return maxDate;
		}
		return maxDate.clone().add(1, 'day').subtract(1, 'minute');
	},
	render: function render() {
		var _props = this.props,
		    id = _props.id,
		    readonly = _props.readonly,
		    placeholder = _props.placeholder,
		    label = _props.label,
		    value = _props.value,
		    _props$className = _props.className,
		    className = _props$className === undefined ? '' : _props$className,
		    formControl = _props.formControl,
		    min = _props.min,
		    max = _props.max,
		    onChange = _props.onChange,
		    onBlur = _props.onBlur,
		    onSubmit = _props.onSubmit,
		    children = _props.children,
		    otherProps = _objectWithoutProperties(_props, ['id', 'readonly', 'placeholder', 'label', 'value', 'className', 'formControl', 'min', 'max', 'onChange', 'onBlur', 'onSubmit', 'children']);

		var localValue = this.state.localValue || this.getLocalValue(value) || '';
		if (readonly) {
			if (formControl) {
				return _react2.default.createElement(
					'div',
					_extends({ className: className + ' form-control-static' }, otherProps),
					localValue
				);
			}
			return _react2.default.createElement(
				'span',
				_extends({ className: className }, otherProps),
				localValue
			);
		}
		return _react2.default.createElement(
			'span',
			null,
			_react2.default.createElement(
				'div',
				{ ref: 'group', className: 'input-group _rfu-date' },
				_react2.default.createElement('input', _extends({ ref: 'input', id: id, name: id, type: 'text', className: className + ' form-control datepicker',
					autoComplete: 'off', placeholder: placeholder || label, value: localValue }, otherProps, {
					onChange: this._onChange, onBlur: this._onBlur })),
				_react2.default.createElement(
					'span',
					{ className: 'input-group-addon' },
					_react2.default.createElement(
						'span',
						{ className: 'fa fa-calendar' },
						' '
					)
				)
			),
			children
		);
	},
	componentDidMount: function componentDidMount() {
		var onSubmit = this.props.onSubmit;

		var minDate = this.getMinDate();
		var maxDate = this.getPickerMaxDate();
		(0, _jquery2.default)(_reactDom2.default.findDOMNode(this.refs.group)).datetimepicker({
			locale: _moment2.default.locale(),
			showTodayButton: true,
			showClear: true,
			format: this.localFormat,
			keyBinds: {
				enter: function enter(element) {
					var open = !!element;
					if (open) {
						this.hide();
					} else if (onSubmit) {
						onSubmit();
					}
				}
			},
			minDate: minDate,
			maxDate: maxDate
		}).on('dp.change', this._onWidgetChange).on('dp.show', this._onWidgetShow);
	},
	_onWidgetShow: function _onWidgetShow() {
		var minDate = this.getMinDate();
		var maxDate = this.getPickerMaxDate();
		var picker = (0, _jquery2.default)(_reactDom2.default.findDOMNode(this.refs.group)).data("DateTimePicker");
		picker.minDate(minDate);
		picker.maxDate(maxDate);
	},
	initWidgetValue: function initWidgetValue(value, prevValue) {
		if (!this.state.localValue) {
			// only when not manually editing
			var picker = (0, _jquery2.default)(_reactDom2.default.findDOMNode(this.refs.group)).data("DateTimePicker");
			if (picker) {
				var localValue = this.getLocalValue(value);
				var pickerValue = picker.date();
				if (!localValue && !pickerValue || pickerValue && localValue === pickerValue.format(this.localFormat)) {
					return;
				}
				this._initWidgetValue = true;
				window.setTimeout(function () {
					picker.date(localValue);
				}, 0);
			}
		}
	},
	focus: function focus() {
		var input = this.refs.input;

		if (input) {
			var el = _reactDom2.default.findDOMNode(input);
			el.focus();
			el.select();
		}
	},
	_onWidgetChange: function _onWidgetChange(event) {
		if (this._initWidgetValue) {
			this._initWidgetValue = undefined;
			return;
		}
		var onChange = this.props.onChange;

		if (this.state.localValue) {
			this.setState({ localValue: null });
		}
		if (onChange) {
			var value = event.date;
			if (value) {
				var localValue = value.format(this.localFormat);
				localValue = this.coerceLocalValue(localValue);
				value = this.getIsoValue(localValue);
			}
			onChange(value);
		}
	},
	_onChange: function _onChange(event) {
		var onChange = this.props.onChange;

		var localValue = event.target.value;
		if (this.state.localValue !== localValue) {
			this.setState({ localValue: localValue });
		}
		if (onChange) {
			localValue = this.coerceLocalValue(localValue);
			var value = this.getIsoValue(localValue);
			onChange(value);
		}
	},
	coerceLocalValue: function coerceLocalValue(localValue) {
		var minDate = this.getMinDate();
		var maxDate = this.getMaxDate();
		var result = localValue;
		if (minDate) {
			result = _moment2.default.max((0, _moment2.default)(result, this.localFormat), minDate).format(this.localFormat);
		}
		if (maxDate) {
			result = _moment2.default.min((0, _moment2.default)(result, this.localFormat), maxDate).format(this.localFormat);
		}
		return result;
	},
	_onBlur: function _onBlur(event) {
		var _props2 = this.props,
		    onChange = _props2.onChange,
		    onBlur = _props2.onBlur;
		var localValue = this.state.localValue;

		if (localValue) {
			localValue = this.coerceLocalValue(localValue);
			if (this.state.localValue) {
				this.setState({ localValue: null }, function () {
					this.initWidgetValue(this.getIsoValue(localValue));
				});
			}
			if (onChange) {
				var value = this.getIsoValue(localValue);
				onChange(value);
			}
		}
		if (onBlur) {
			onBlur(event);
		}
	}
});