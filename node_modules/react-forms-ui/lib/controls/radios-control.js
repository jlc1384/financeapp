'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _controlMixin = require('./control-mixin');

var _controlMixin2 = _interopRequireDefault(_controlMixin);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

exports.default = _react2.default.createClass({
	displayName: 'radios-control',


	mixins: [_controlMixin2.default],

	render: function render() {
		var _this = this;

		var _props = this.props,
		    id = _props.id,
		    readonly = _props.readonly,
		    value = _props.value,
		    _props$className = _props.className,
		    className = _props$className === undefined ? '' : _props$className,
		    formControl = _props.formControl,
		    data = _props.data,
		    onChange = _props.onChange,
		    onBlur = _props.onBlur,
		    children = _props.children,
		    otherProps = _objectWithoutProperties(_props, ['id', 'readonly', 'value', 'className', 'formControl', 'data', 'onChange', 'onBlur', 'children']);

		if (readonly) {
			if (formControl) {
				return _react2.default.createElement(
					'div',
					_extends({ className: className + ' form-control-static' }, otherProps),
					data[value]
				);
			}
			return _react2.default.createElement(
				'span',
				_extends({ className: className }, otherProps),
				data[value]
			);
		}
		return _react2.default.createElement(
			'div',
			null,
			Object.keys(data).map(function (key, index) {
				return _react2.default.createElement(
					'div',
					{ key: id + '-' + key, className: 'radio' },
					_react2.default.createElement(
						'label',
						null,
						_react2.default.createElement('input', _extends({ ref: 'radio' + index, type: 'radio', name: id, id: id + '-' + key, value: key,
							className: className, checked: key === value }, otherProps, {
							onChange: _this._onChange, onBlur: _this._onBlur })),
						data[key]
					)
				);
			}),
			children
		);
	},
	focus: function focus() {
		var radio0 = this.refs.radio0;

		if (radio0) {
			var el = _reactDom2.default.findDOMNode(radio0);
			el.focus();
		}
	},
	_onChange: function _onChange(event) {
		var onChange = this.props.onChange;

		if (onChange) {
			var split = event.target.id.split('-');
			var value = split[split.length - 1];
			onChange(value);
		}
	},
	_onBlur: function _onBlur(event) {
		var onBlur = this.props.onBlur;

		if (onBlur) {
			onBlur(event);
		}
	}
});