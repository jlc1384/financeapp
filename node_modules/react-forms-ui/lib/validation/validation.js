'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _options = require('../options/options');

var _options2 = _interopRequireDefault(_options);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Validation = function Validation(values, tableForm) {
	this.values = values;
	this.tableForm = tableForm;
	this.messages = this.tableForm ? [] : {};
};

Object.assign(Validation.prototype, {
	hasError: function hasError() {
		if (this.tableForm) {
			return this.messages.find(function (messagesRow, row) {
				return this.hasRowError(messagesRow, row);
			}, this);
		} else {
			return this.hasRowError(this.messages);
		}
	},
	hasRowError: function hasRowError(messagesRow, row) {
		return !!Object.keys(messagesRow).find(function (field) {
			return this.hasFieldError(field, row);
		}, this);
	},
	hasFieldError: function hasFieldError(field, row) {
		var messages = this.tableForm ? this.messages[row] || {} : this.messages;
		var fieldMessages = messages[field];
		return fieldMessages && fieldMessages.find(function (message) {
			return 'error' === message.type || !message.type;
		});
	},
	add: function add(field, text, type, row) {
		var messages = this.tableForm ? this.messages[row] : this.messages;
		if (this.tableForm && !messages) {
			messages = this.messages[row] = {};
		}
		if (!messages[field]) {
			messages[field] = [];
		}
		if (!type) {
			messages[field].push(text);
		} else {
			messages[field].push({
				text: text,
				type: type
			});
		}
	},
	autoValidate: function autoValidate(validations) {
		if (!validations) {
			return;
		}
		Object.keys(validations).forEach(function (field) {
			var validation = validations[field];
			if (validation.required) {
				this.required(field);
			}
			if (null != validation.minLength) {
				this.minLength(field, validation.minLength);
			}
			if (null != validation.maxLength) {
				this.maxLength(field, validation.maxLength);
			}
			if (null != validation.min) {
				this.min(field, validation.min);
			}
			if (null != validation.max) {
				this.max(field, validation.max);
			}
			if (validation.pattern) {
				this.pattern(field, validation.pattern);
			}
			if (validation.fn) {
				this.fn(field, validation.fn);
			}
			if (false !== validation.autoSuccess) {
				this.autoSuccess(field);
			}
		}, this);
	},
	required: function required(field) {
		if (this.tableForm) {
			this.values.forEach(function (valuesRow, row) {
				this._requiredRow(field, valuesRow[field], row);
			}, this);
		} else {
			this._requiredRow(field, this.values[field]);
		}
	},
	_requiredRow: function _requiredRow(field, value, row) {
		if (typeof value !== 'undefined' && null === value || '' === value) {
			var label = _options2.default.translate ? _options2.default.translate('validation:required') : 'Required.';
			this.add(field, label, undefined, row);
		}
	},
	minLength: function minLength(field, _minLength) {
		if (this.tableForm) {
			this.values.forEach(function (valuesRow, row) {
				this._minLengthRow(field, _minLength, valuesRow[field], row);
			}, this);
		} else {
			this._minLengthRow(field, _minLength, this.values[field]);
		}
	},
	_minLengthRow: function _minLengthRow(field, minLength, value, row) {
		if (value && null != minLength && value.length < minLength) {
			var label = _options2.default.translate ? _options2.default.translate('validation:minLength', { count: minLength }) : 'Must have at least ' + minLength + ' characters.';
			this.add(field, label, undefined, row);
		}
	},
	maxLength: function maxLength(field, _maxLength) {
		if (this.tableForm) {
			this.values.forEach(function (valuesRow, row) {
				this._maxLengthRow(field, _maxLength, valuesRow[field], row);
			}, this);
		} else {
			this._maxLengthRow(field, _maxLength, this.values[field]);
		}
	},
	_maxLengthRow: function _maxLengthRow(field, maxLength, value, row) {
		if (value && null != maxLength && value.length > maxLength) {
			var label = _options2.default.translate ? _options2.default.translate('validation:maxLength', { count: maxLength }) : 'Must have at most ' + maxLength + ' characters.';
			this.add(field, label, undefined, row);
		}
	},
	min: function min(field, _min) {
		if (this.tableForm) {
			this.values.forEach(function (valuesRow, row) {
				this._min(field, _min, valuesRow[field], row);
			}, this);
		} else {
			this._min(field, _min, this.values[field]);
		}
	},
	_min: function _min(field, min, value, row) {
		if (null != value && null != min && typeof value === 'number' && value < min) {
			var label = _options2.default.translate ? _options2.default.translate('validation:min', { count: min }) : 'Must be at least ' + min + '.';
			this.add(field, label, undefined, row);
		}
	},
	max: function max(field, _max) {
		if (this.tableForm) {
			this.values.forEach(function (valuesRow, row) {
				this._max(field, _max, valuesRow[field], row);
			}, this);
		} else {
			this._max(field, _max, this.values[field]);
		}
	},
	_max: function _max(field, max, value, row) {
		if (null != value && null != max && typeof value === 'number' && value > max) {
			var label = _options2.default.translate ? _options2.default.translate('validation:max', { count: max }) : 'Must be at most ' + max + '.';
			this.add(field, label, undefined, row);
		}
	},
	pattern: function pattern(field, _pattern) {
		if (this.tableForm) {
			this.values.forEach(function (valuesRow, row) {
				this._patternRow(field, _pattern, valuesRow[field], row);
			}, this);
		} else {
			this._patternRow(field, _pattern, this.values[field]);
		}
	},
	_patternRow: function _patternRow(field, pattern, value, row) {
		if (value && pattern && !pattern.test(value)) {
			var label = _options2.default.translate ? _options2.default.translate('validation:invalidFormat') : 'Invalid format.';
			this.add(field, label, undefined, row);
		}
	},
	fn: function fn(field, _fn) {
		if (this.tableForm) {
			this.values.forEach(function (valuesRow, row) {
				this._fn(field, _fn, valuesRow[field], row);
			}, this);
		} else {
			this._fn(field, _fn, this.values[field]);
		}
	},
	_fn: function _fn(field, fn, value, row) {
		fn(this, field, value, row, this.values);
	},
	autoSuccess: function autoSuccess(field) {
		if (this.tableForm) {
			this.values.forEach(function (valuesRow, row) {
				this._autoSuccessRow(field, valuesRow[field], row);
			}, this);
		} else {
			this._autoSuccessRow(field, this.values[field]);
		}
	},
	_autoSuccessRow: function _autoSuccessRow(field, value, row) {
		if (!this.hasFieldError(field, row) && typeof value !== 'undefined') {
			this.add(field, null, 'success', row);
		}
	},
	suffix: function suffix(number) {
		if (number == 1) {
			return '';
		}
		if (number < 5) {
			return 's';
		}
		return 's';
	}
});

exports.default = Validation;