'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactBootstrap = require('react-bootstrap');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Message = _react2.default.createClass({
	displayName: 'Message',
	getInitialState: function getInitialState() {
		return {};
	},
	render: function render() {
		var _props = this.props,
		    text = _props.text,
		    dismissible = _props.dismissible;
		var dismissed = this.state.dismissed;

		if (!text || dismissed) {
			return _react2.default.createElement('span', null);
		}
		var outerClass = '_rfu-inline-message' + (dismissible ? ' alert-dismissible' : '');
		var innerClass = '_rfu-inline-message-icon glyphicon glyphicon-' + this.getGlyphicon();
		var onDismiss = dismissible ? this.handleDismiss : null;
		return _react2.default.createElement(
			_reactBootstrap.Alert,
			{ ref: 'el', bsStyle: this.getAlertType(), className: outerClass, onDismiss: onDismiss },
			_react2.default.createElement('span', { className: innerClass }),
			' ',
			' ',
			' ',
			text
		);
	},
	getAlertType: function getAlertType() {
		var type = this.props.type;

		if ('error' === type || !type) {
			return 'danger';
		}
		return type;
	},
	getGlyphicon: function getGlyphicon() {
		var type = this.props.type;

		switch (type) {
			case 'success':
				return 'ok-sign';
			case 'info':
				return 'info-sign';
			case 'warning':
				return 'warning-sign';
			default:
				return 'exclamation-sign';
		}
	},
	setupAutoDismiss: function setupAutoDismiss() {
		var _this = this;

		var _props2 = this.props,
		    type = _props2.type,
		    dismissible = _props2.dismissible;

		if (dismissible && 'success' === type) {
			setTimeout(function () {
				return _this.handleDismiss();
			}, 1500);
		}
	},
	componentDidMount: function componentDidMount() {
		this.setupAutoDismiss();
	},
	handleDismiss: function handleDismiss() {
		this.setState({ dismissed: true });
	},
	restore: function restore() {
		this.setState({ dismissed: false });
		this.setupAutoDismiss();
	}
});

Message.propTypes = {
	type: _react2.default.PropTypes.string,
	text: _react2.default.PropTypes.string,
	dismissible: _react2.default.PropTypes.bool
};

exports.default = Message;