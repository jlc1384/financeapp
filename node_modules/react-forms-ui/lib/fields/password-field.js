'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _field = require('./field');

var _field2 = _interopRequireDefault(_field);

var _passwordControl = require('../controls/password-control');

var _passwordControl2 = _interopRequireDefault(_passwordControl);

var _fieldMixin = require('./field-mixin');

var _fieldMixin2 = _interopRequireDefault(_fieldMixin);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var PasswordField = _react2.default.createClass({
	displayName: 'PasswordField',


	mixins: [_fieldMixin2.default],

	render: function render() {
		var _this = this;

		var _props = this.props,
		    id = _props.id,
		    label = _props.label,
		    classes = _props.classes,
		    readonly = _props.readonly,
		    placeholder = _props.placeholder,
		    row = _props.row,
		    children = _props.children,
		    otherProps = _objectWithoutProperties(_props, ['id', 'label', 'classes', 'readonly', 'placeholder', 'row', 'children']);

		var showFeedback = this.state.showFeedback;
		var _context$form$props = this.context.form.props,
		    tableForm = _context$form$props.tableForm,
		    validations = _context$form$props.validations;

		var value = this._getValue();
		var required = validations && validations[id] ? validations[id].required : false;
		if (tableForm) {
			id = id + '-' + row;
		}
		return _react2.default.createElement(
			_field2.default,
			{ id: id, label: label, classes: classes, required: required, readonly: readonly,
				showFeedback: showFeedback, fieldStatus: this._getFieldStatus(), feedback: this._getFeedback(),
				fieldMessages: this._getFieldMessages(), tableForm: tableForm },
			_react2.default.createElement(
				_passwordControl2.default,
				_extends({ ref: function ref(el) {
						return _this.control = el;
					}, id: id, placeholder: placeholder, label: label,
					value: value, readonly: readonly, onChange: this.onChange, onBlur: this._onBlur,
					formControl: true }, otherProps),
				children
			)
		);
	},
	focus: function focus() {
		var control = this.control;

		if (control) {
			control.focus();
		} else {
			console.error('No control on the field.', 'Have you reset form\'s fields and forgot to call form.resetFields()?');
		}
	},
	onChange: function onChange(value) {
		this._setChanging();
		var _props2 = this.props,
		    id = _props2.id,
		    row = _props2.row;
		var form = this.context.form;

		if (form) {
			form._onChange(id, value, row);
		}
	}
});

PasswordField.contextTypes = {
	form: _react2.default.PropTypes.object
};

PasswordField.propTypes = {
	id: _react2.default.PropTypes.string.isRequired,
	label: _react2.default.PropTypes.string.isRequired,
	placeholder: _react2.default.PropTypes.string,
	classes: _react2.default.PropTypes.string.isRequired,
	readonly: _react2.default.PropTypes.bool,
	row: _react2.default.PropTypes.number
};

exports.default = PasswordField;