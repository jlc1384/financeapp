'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _dateControl = require('../controls/date-control');

var _dateControl2 = _interopRequireDefault(_dateControl);

var _label = require('../label/label');

var _label2 = _interopRequireDefault(_label);

var _messages = require('../messages/messages');

var _messages2 = _interopRequireDefault(_messages);

var _fieldMixin = require('./field-mixin');

var _fieldMixin2 = _interopRequireDefault(_fieldMixin);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var DateRangeField = _react2.default.createClass({
	displayName: 'DateRangeField',


	mixins: [_fieldMixin2.default],

	render: function render() {
		var _this = this;

		var _props = this.props,
		    id = _props.id,
		    label = _props.label,
		    classes = _props.classes,
		    readonly = _props.readonly,
		    placeholderFrom = _props.placeholderFrom,
		    placeholderTo = _props.placeholderTo,
		    row = _props.row,
		    children = _props.children,
		    otherProps = _objectWithoutProperties(_props, ['id', 'label', 'classes', 'readonly', 'placeholderFrom', 'placeholderTo', 'row', 'children']);

		var showFeedback = this.state.showFeedback;
		var _context = this.context,
		    form = _context.form,
		    _context$form$props = _context.form.props,
		    tableForm = _context$form$props.tableForm,
		    validations = _context$form$props.validations;

		classes = classes ? classes.split(',') : [];
		var formGroupClassName = 'form-group ' + this._getFieldStatus();
		var valueFrom = this._getValue('From');
		var valueTo = this._getValue('To');
		var required = validations && (validations[id + 'From'] && validations[id + 'From'].required || validations[id + 'To'] && validations[id + 'To'].required);
		if (tableForm) {
			id = id + '-' + row;
			formGroupClassName += ' _rfu-table-form-group';
		}
		return _react2.default.createElement(
			'div',
			{ className: formGroupClassName + ' _rfu-no-feedback-icon' },
			!tableForm && _react2.default.createElement(
				_label2.default,
				{ htmlFor: id + 'From', className: classes[0],
					required: required ? 'required' : false },
				label
			),
			_react2.default.createElement(
				'div',
				{ className: tableForm ? 'col-xs-12' : classes[1] },
				readonly && _react2.default.createElement(
					'div',
					{ className: 'form-control-static' },
					_dateControl2.default.prototype.getLocalValue(valueFrom),
					(valueFrom || valueTo) && ' â€“ ',
					_dateControl2.default.prototype.getLocalValue(valueTo)
				),
				!readonly && _react2.default.createElement(
					'div',
					{ className: 'row' },
					_react2.default.createElement(
						'div',
						{ className: 'col-xs-6 _rfu-date-range-date-wrapper' },
						_react2.default.createElement(_dateControl2.default, _extends({ ref: function ref(el) {
								return _this.controlFrom = el;
							}, id: id + 'From',
							placeholder: placeholderFrom, label: label, value: valueFrom,
							readonly: readonly, onChange: this.onChangeFrom, onBlur: this._onBlur,
							onSubmit: form._onSubmit, max: this.getFromMaxDate,
							formControl: true }, otherProps))
					),
					_react2.default.createElement(
						'div',
						{ className: 'col-xs-6 _rfu-date-range-date-wrapper' },
						_react2.default.createElement(_dateControl2.default, _extends({ ref: function ref(el) {
								return _this.controlTo = el;
							}, id: id + 'To', placeholder: placeholderTo,
							label: label, value: valueTo, readonly: readonly, onChange: this.onChangeTo,
							onBlur: this._onBlur, onSubmit: form._onSubmit, min: this.getToMinDate,
							formControl: true }, otherProps))
					)
				)
			),
			!readonly && _react2.default.createElement(
				'div',
				{ className: tableForm ? 'col-xs-12' : classes[2] },
				_react2.default.createElement(_messages2.default, { ref: 'messages', id: id + 'From', fieldMessages: this.getFromMessages(),
					showFeedback: showFeedback, style: { display: 'inline' } }),
				_react2.default.createElement(_messages2.default, { ref: 'messages', id: id + 'To', fieldMessages: this.getToMessages(),
					showFeedback: showFeedback, style: { display: 'inline' } })
			)
		);
	},
	getToMinDate: function getToMinDate() {
		return this._getValue('From');
	},
	getFromMaxDate: function getFromMaxDate() {
		return this._getValue('To');
	},
	getValueKeys: function getValueKeys() {
		var id = this.props.id;

		return [id + 'From', id + 'To'];
	},
	focus: function focus() {
		var controlFrom = this.controlFrom;

		if (controlFrom) {
			controlFrom.focus();
		}
	},
	focusError: function focusError() {
		var fromType = this._getMessagesStatusType(this.getFromMessages());
		if ('error' === fromType) {
			this.controlFrom.focus();
		} else {
			this.controlTo.focus();
		}
	},
	getFromMessages: function getFromMessages() {
		var _props2 = this.props,
		    id = _props2.id,
		    row = _props2.row;
		var _context$form$props2 = this.context.form.props,
		    tableForm = _context$form$props2.tableForm,
		    messages = _context$form$props2.state.messages;

		if (messages) {
			if (tableForm) {
				return messages[row] ? messages[row][id + 'From'] : null;
			}
			return messages[id + 'From'];
		}
	},
	getToMessages: function getToMessages() {
		var _props3 = this.props,
		    id = _props3.id,
		    row = _props3.row;
		var _context$form$props3 = this.context.form.props,
		    tableForm = _context$form$props3.tableForm,
		    messages = _context$form$props3.state.messages;

		if (messages) {
			if (tableForm) {
				return messages[row] ? messages[row][id + 'To'] : null;
			}
			return messages[id + 'To'];
		}
	},
	getFieldMessages: function getFieldMessages() {
		var messagesFrom = this.getFromMessages();
		var messagesTo = this.getToMessages();
		var result = [];
		if (messagesFrom) {
			result = result.concat(messagesFrom);
		}
		if (messagesTo) {
			result = result.concat(messagesTo);
		}
		return messagesFrom || messagesTo ? result : null;
	},
	getFieldStatusType: function getFieldStatusType() {
		var fromType = this._getMessagesStatusType(this.getFromMessages());
		var toType = this._getMessagesStatusType(this.getToMessages());
		if ('error' === fromType || 'error' === toType) {
			return 'error';
		}
		if ('success' === fromType && 'success' === toType) {
			return 'success';
		}
		return '';
	},
	onChangeFrom: function onChangeFrom(value) {
		this._setChanging();
		var _props4 = this.props,
		    id = _props4.id,
		    row = _props4.row;
		var form = this.context.form;

		if (form) {
			form._onChange(id + 'From', value, row);
		}
	},
	onChangeTo: function onChangeTo(value) {
		this._setChanging();
		var _props5 = this.props,
		    id = _props5.id,
		    row = _props5.row;
		var form = this.context.form;

		if (form) {
			form._onChange(id + 'To', value, row);
		}
	},
	initWidgetValue: function initWidgetValue(value, prevValue, valueKey) {
		var id = this.props.id;

		if (id + 'From' === valueKey && this.controlFrom) {
			this.controlFrom.initWidgetValue(value, prevValue);
		}
		if (id + 'To' === valueKey && this.controlTo) {
			this.controlTo.initWidgetValue(value, prevValue);
		}
	}
});

DateRangeField.contextTypes = {
	form: _react2.default.PropTypes.object
};

DateRangeField.propTypes = {
	id: _react2.default.PropTypes.string.isRequired,
	label: _react2.default.PropTypes.string.isRequired,
	placeholderFrom: _react2.default.PropTypes.string,
	placeholderTo: _react2.default.PropTypes.string,
	classes: _react2.default.PropTypes.string.isRequired,
	readonly: _react2.default.PropTypes.bool,
	row: _react2.default.PropTypes.number
};

exports.default = DateRangeField;