'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactHelper = require('../support/react-helper');

var _reactHelper2 = _interopRequireDefault(_reactHelper);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {

	_formField: true,

	propTypes: {
		className: _reactHelper2.default.validateUnsupportedProp
	},

	getInitialState: function getInitialState() {
		return { showFeedback: 'none' };
	},
	componentWillMount: function componentWillMount() {
		var form = this.context.form;

		if (form) {
			form.registerField(this);
		}
	},
	_getValue: function _getValue(suffix) {
		var form = this.context.form;

		if (!form || !form.props.state || !form.props.state.values) {
			return null;
		}
		var _props = this.props,
		    id = _props.id,
		    row = _props.row;
		var _form$props = form.props,
		    tableForm = _form$props.tableForm,
		    values = _form$props.state.values;

		var valueKey = id + (suffix || '');
		return tableForm ? values[row][valueKey] : values[valueKey];
	},
	_getValueKeys: function _getValueKeys() {
		if (this.getValueKeys) {
			return this.getValueKeys();
		}
		var id = this.props.id;

		return [id];
	},
	_focusError: function _focusError() {
		if (this.focusError) {
			this.focusError();
		} else {
			this.focus();
		}
	},
	_setChanging: function _setChanging() {
		this.setState({ showFeedback: 'positive' });
	},
	_getFieldMessages: function _getFieldMessages() {
		if (this.getFieldMessages) {
			return this.getFieldMessages();
		}
		var _props2 = this.props,
		    id = _props2.id,
		    row = _props2.row;
		var _context$form$props = this.context.form.props,
		    tableForm = _context$form$props.tableForm,
		    state = _context$form$props.state;

		if (state) {
			var messages = state.messages;

			if (messages) {
				if (tableForm) {
					return messages[row] ? messages[row][id] : null;
				}
				return tableForm ? messages[row][id] : messages[id];
			}
		}
	},
	_getFieldStatusType: function _getFieldStatusType() {
		if (this.getFieldStatusType) {
			return this.getFieldStatusType();
		}
		var fieldMessages = this._getFieldMessages();
		return this._getMessagesStatusType(fieldMessages);
	},
	_getMessagesStatusType: function _getMessagesStatusType(messages) {
		var showFeedback = this.state.showFeedback;

		if ('none' !== showFeedback && messages) {
			if (this._hasError(messages) && 'all' === showFeedback) {
				return 'error';
			}
			return messages[0].type;
		}
		return '';
	},
	_getFieldStatus: function _getFieldStatus() {
		var fieldStatusType = this._getFieldStatusType();
		if (fieldStatusType) {
			return 'has-feedback has-' + fieldStatusType;
		}
		return '';
	},
	_getFeedbackType: function _getFeedbackType() {
		var fieldStatusType = this._getFieldStatusType();
		if (fieldStatusType) {
			switch (fieldStatusType) {
				case 'error':
					return 'remove';
				case 'success':
					return 'ok';
				case 'warning':
					return 'question-sign';
				case 'info':
					return 'info-sign';
			}
		}
		return '';
	},
	_getFeedback: function _getFeedback() {
		var feedbackType = this._getFeedbackType();
		if (feedbackType) {
			var className = 'form-control-feedback glyphicon glyphicon-' + feedbackType;
			return _react2.default.createElement(
				'span',
				{ className: className },
				' '
			);
		}
	},
	_hasError: function _hasError(messages) {
		messages = messages || this._getFieldMessages();
		if (messages) {
			return messages.find(function (message) {
				return 'error' === message.type || !message.type;
			}, this);
		}
	},
	_onBlur: function _onBlur() {
		var showFeedback = this.state.showFeedback;

		if ('positive' === showFeedback) {
			this.setState({ showFeedback: 'all' });
		}
	}
};